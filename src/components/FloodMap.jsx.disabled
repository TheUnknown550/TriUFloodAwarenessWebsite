import React, { useMemo } from 'react';
import { Map } from 'react-map-gl';
import DeckGL from '@deck.gl/react';
import { ScatterplotLayer, PolygonLayer, PathLayer, TextLayer } from '@deck.gl/layers';
import { GAME_SCENARIO } from '../data';

const FloodMap = ({ currentLocation, availableRoutes, path }) => {
  const { mapConfig, locations, floodZones, routes } = GAME_SCENARIO;

  // Create layers for the map
  const layers = useMemo(() => {
    const result = [];

    // Flood zones layer
    result.push(
      new PolygonLayer({
        id: 'flood-zones',
        data: floodZones,
        pickable: true,
        stroked: true,
        filled: true,
        wireframe: true,
        lineWidthMinPixels: 2,
        getPolygon: d => d.coordinates,
        getFillColor: d => d.color,
        getLineColor: [255, 255, 255, 100],
        getLineWidth: 2,
      })
    );

    // All locations layer
    result.push(
      new ScatterplotLayer({
        id: 'all-locations',
        data: locations,
        pickable: true,
        opacity: 0.8,
        stroked: true,
        filled: true,
        radiusScale: 1,
        radiusMinPixels: 8,
        radiusMaxPixels: 15,
        lineWidthMinPixels: 2,
        getPosition: d => d.coordinates,
        getRadius: d => {
          if (d.id === currentLocation) return 15;
          if (path.includes(d.id)) return 12;
          if (d.type === 'destination') return 12;
          return 10;
        },
        getFillColor: d => {
          if (d.id === currentLocation) return [0, 150, 255, 255]; // Blue for current
          if (path.includes(d.id)) return [50, 200, 50, 255]; // Green for visited
          if (d.type === 'destination') return [255, 100, 255, 255]; // Purple for shelter
          if (d.type === 'start') return [100, 255, 100, 255]; // Light green for start
          return [150, 150, 150, 255]; // Gray for unvisited
        },
        getLineColor: [255, 255, 255, 255],
        getLineWidth: 2,
      })
    );

    // Available routes layer (highlighted paths user can take)
    if (availableRoutes && availableRoutes.length > 0) {
      const routePaths = availableRoutes.map(route => {
        const fromLocation = locations.find(loc => loc.id === route.from);
        const toLocation = locations.find(loc => loc.id === route.to);
        return {
          path: [fromLocation.coordinates, toLocation.coordinates],
          safe: route.safe,
          description: route.description
        };
      });

      result.push(
        new PathLayer({
          id: 'available-routes',
          data: routePaths,
          pickable: true,
          widthScale: 3,
          widthMinPixels: 4,
          getPath: d => d.path,
          getColor: d => d.safe 
            ? [50, 255, 50, 200]   // Green for safe routes
            : [255, 50, 50, 200],  // Red for flooded routes
          getWidth: 8,
          getDashArray: d => d.safe ? [0, 0] : [10, 5], // Dashed for unsafe routes
        })
      );
    }

    // Traveled path layer
    if (path.length > 1) {
      const traveledPath = [];
      for (let i = 0; i < path.length - 1; i++) {
        const fromLoc = locations.find(loc => loc.id === path[i]);
        const toLoc = locations.find(loc => loc.id === path[i + 1]);
        if (fromLoc && toLoc) {
          traveledPath.push({
            path: [fromLoc.coordinates, toLoc.coordinates]
          });
        }
      }

      result.push(
        new PathLayer({
          id: 'traveled-path',
          data: traveledPath,
          pickable: false,
          widthScale: 2,
          widthMinPixels: 3,
          getPath: d => d.path,
          getColor: [100, 200, 255, 255], // Blue for traveled path
          getWidth: 6,
        })
      );
    }

    // Location labels
    result.push(
      new TextLayer({
        id: 'location-labels',
        data: locations,
        pickable: false,
        getPosition: d => d.coordinates,
        getText: d => d.name,
        getSize: d => d.id === currentLocation ? 14 : 11,
        getAngle: 0,
        getTextAnchor: 'start',
        getAlignmentBaseline: 'bottom',
        getPixelOffset: [10, -10],
        getColor: [0, 0, 0, 255],
        backgroundColor: [255, 255, 255, 200],
        fontFamily: 'Arial',
        fontWeight: d => d.id === currentLocation ? 'bold' : 'normal',
      })
    );

    // Current location indicator (pulsing dot)
    const currentLoc = locations.find(loc => loc.id === currentLocation);
    if (currentLoc) {
      result.push(
        new ScatterplotLayer({
          id: 'current-location-pulse',
          data: [currentLoc],
          pickable: false,
          opacity: 0.6,
          stroked: false,
          filled: true,
          radiusScale: 1,
          radiusMinPixels: 20,
          radiusMaxPixels: 25,
          getPosition: d => d.coordinates,
          getRadius: 25,
          getFillColor: [0, 150, 255, 100],
          updateTriggers: {
            getRadius: Date.now() // This will cause animation
          }
        })
      );
    }

    return result;
  }, [currentLocation, availableRoutes, path, locations, floodZones]);

  return (
    <div className="relative w-full h-96 rounded-lg overflow-hidden shadow-lg">
      <DeckGL
        initialViewState={mapConfig.initialViewState}
        controller={true}
        layers={layers}
        style={{ position: 'relative' }}
      >
        <Map
          mapStyle={mapConfig.mapStyle}
          style={{ width: '100%', height: '100%' }}
        />
      </DeckGL>
      
      {/* Map Legend */}
      <div className="absolute top-4 right-4 bg-white bg-opacity-95 p-3 rounded-lg shadow-md text-xs">
        <h4 className="font-bold text-gray-800 mb-2">Map Legend</h4>
        <div className="space-y-1">
          <div className="flex items-center">
            <div className="w-3 h-3 bg-blue-500 rounded-full mr-2"></div>
            <span>You Are Here</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
            <span>Visited Location</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-purple-500 rounded-full mr-2"></div>
            <span>Emergency Shelter</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-1 bg-green-500 mr-2"></div>
            <span>Safe Route</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-1 bg-red-500 mr-2" style={{ background: 'repeating-linear-gradient(to right, #ef4444 0, #ef4444 3px, transparent 3px, transparent 6px)' }}></div>
            <span>Flooded Route</span>
          </div>
          <div className="flex items-center">
            <div className="w-3 h-3 bg-red-200 mr-2 opacity-70"></div>
            <span>Flood Zone</span>
          </div>
        </div>
      </div>

      {/* Emergency Info */}
      <div className="absolute bottom-4 left-4 bg-red-600 text-white p-2 rounded shadow-md">
        <div className="text-xs font-bold">ðŸš¨ FLOOD EMERGENCY</div>
        <div className="text-xs">Avoid red areas!</div>
      </div>
    </div>
  );
};

export default FloodMap;